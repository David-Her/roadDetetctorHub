CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

SET(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/external/cmake-modules")
SET(CMAKE_CONFIGURATION_TYPES "Debug;Release" CACHE STRING "Only do Release and Debug" FORCE )
MARK_AS_ADVANCED(CMAKE_CONFIGURATION_TYPES)

OPTION(DISABLE_CXX11_ABI "Disable GLIBCXX11 ABI." ON)
IF(DISABLE_CXX11_ABI)
   add_definitions("-D_GLIBCXX_USE_CXX11_ABI=0") # quick hack for new C++ ABI
ENDIF(DISABLE_CXX11_ABI)

PROJECT(libroadfollower)      #must be after setting cmake_configuration_types

#defines the core sources of rufus-roadrunner
SET(RoadFollower_CORE_SRC ${CMAKE_HOME_DIRECTORY}/src)
    
#defines the include of rufus-roadrunner
SET(RoadFollower_INCLUDE_DIR ${CMAKE_HOME_DIRECTORY}/include)

IF(ANDROID)

    #Set and check root folder for Android (e.g. Android 2.2)    
    IF("$ENV{ANDROIDDIR}" STREQUAL "")
        SET(ANDROID_ROOT
            /opt/FriendlyARM/mini6410/android20110112/Android-2.2
        )
        MESSAGE(STATUS "WARNING: ANDROIDDIR environment variable not set. Setting ANDROID_ROOT to default: ${ANDROID_ROOT}")      
    ELSE("$ENV{ANDROIDDIR}" STREQUAL "")
        SET(ANDROID_ROOT
            $ENV{ANDROIDDIR}
        )
         MESSAGE(STATUS "INFO: ANDROIDDIR found: $ENV{ANDROIDDIR}")      
    ENDIF("$ENV{ANDROIDDIR}" STREQUAL "")
    
    #Assumption: Android folder has a subfolder rootfs_dir (the one that will be compessed as rootfs_android.ubi for bootloader)
    SET(ANDROID_ROOT_FS
        ${ANDROID_ROOT}/rootfs_dir
    )
    
    SET (CMAKE_FIND_ROOT_PATH
    	${CMAKE_FIND_ROOT_PATH}
    	${ANDROID_ROOT}
    	${ANDROID_ROOT_FS}
    	#/opt/FriendlyARM/mini6410/android20110112/Android-2.2
        #/opt/FriendlyARM
    )
    MESSAGE(STATUS "INFO: CMAKE_FIND_ROOT_PATH ${CMAKE_FIND_ROOT_PATH}")  
    
    #notice the "recycling" of CMAKE_C_FLAGS
    #this is necessary to pick up android flags
    set( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -pedantic" ) 
                  
    # be need to baked in for the correct rpath for the FriendlyARM binary
    LINK_DIRECTORIES( # bake in correct rpath for FriendlyARM
        /system/lib
    )

ELSEIF(ANGSTROM)    
 
    #  allow "local" directories to be searched (toolchin file is rather strict here) 
    SET (CMAKE_FIND_ROOT_PATH
    	${CMAKE_FIND_ROOT_PATH}
    )
    
    SET(EXTRA_LIBS pthread) # (android has this already included in the standard c lib...)    
    
ELSE(ANDROID)      

    #defines where static libraries are stored
    SET(LIBRARY_OUTPUT_PATH ${CMAKE_HOME_DIRECTORY}/lib)
    
    #defines where the executables are stored
    SET(EXECUTABLE_OUTPUT_PATH ${CMAKE_HOME_DIRECTORY}/bin)
    
    #defines where dynamic libraries (plugins) are stored
    SET (CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_HOME_DIRECTORY}/bin)
    
    IF(NOT WIN32)
	set(CMAKE_CXX_FLAGS "-Wall")
	SET(EXTRA_LIBS pthread) # (android has this already included in the standard c lib...)    
   
    ENDIF(NOT WIN32)


ENDIF(ANDROID)

IF(WIN32)
	message("ERROR: Windows platforms are not supported")
ENDIF(WIN32)


#FIND_PACKAGE(LibC)
#IF (LIBC_FOUND)
#	MESSAGE(STATUS "SUCCESSFUL: LibC found")
#ELSE (LIBC_FOUND) 
#	MESSAGE(STATUS "ERROR: LibC not found")
#ENDIF (LIBC_FOUND)

# search for cpp unit testing library
OPTION(USE_GTEST "Enable google test framework." OFF)
IF(USE_GTEST)
    FIND_PACKAGE(GTest)
    IF (GTEST_FOUND)
      MESSAGE(STATUS "SUCCESSFUL: GTest found")
    ELSE (GTEST_FOUND)
      MESSAGE(STATUS "WARNING: GTest not found")
    ENDIF (GTEST_FOUND)
    
    INCLUDE(UseCodeCoverage) # for codecoverage tools with gcc (optional)
    # Note specyfy DEBUG as build target as debug symbols are needed.
    # Also spefify -coverage -lgcov for the linker
         
ENDIF(USE_GTEST)

#each generates one library or application	
ADD_SUBDIRECTORY(src)     
#######################################
### DAVID test code
ADD_SUBDIRECTORY(examples)
#######################################   

IF (GTEST_FOUND) 
    ADD_SUBDIRECTORY(tests)
ENDIF(GTEST_FOUND)
